# prompt: name: 🐞 Bug Report
# description: Create a bug report to help us improve.
# title: "[Bug]: "
# labels: ["bug", "triage"]
# body:
#     - type: markdown
#       attributes:
#           value: |
#               ## Bug description
#     - type: textarea
#       attributes:
#           label: Current Behavior
#           description: A concise description of what you're experiencing.
#       validations:
#           required: true
#     - type: textarea
#       attributes:
#           label: Expected Behavior
#           description: A concise description of what you expected to happen.
#       validations:
#           required: true
#     - type: textarea
#       attributes:
#           label: Steps To Reproduce
#           description: Steps to reproduce the behavior.
#           placeholder: |
#               1. In this environment...
#               2. With this config...
#               3. Run '...'
#               4. See error...
#       validations:
#           required: true
#     - type: markdown
#       attributes:
#           value: |
#               ## Environment details
#               We require that you provide us the version of Wave you're running so we can track issues across versions. To find the Wave version, go to the app menu (this always visible on macOS, for Windows and Linux, click the `...` button) and navigate to `Wave -> About Wave Terminal`. This will bring up the About modal. Copy the client version and paste it below.
#     - type: input
#       attributes:
#           label: Wave Version
#           description: The version of Wave you are running
#           placeholder: v0.8.8
#       validations:
#           required: true
#     - type: dropdown
#       attributes:
#           label: Platform
#           description: The OS platform of the computer where you are running Wave
#           options:
#               - macOS
#               - Linux
#               - Windows
#       validations:
#           required: true
#     - type: input
#       attributes:
#           label: OS Version/Distribution
#           description: The version of the oper

# Install necessary libraries
!pip install networkx matplotlib matplotlib-venn

import networkx as nx
import matplotlib.pyplot as plt
from matplotlib_venn import venn2

# Sample data (replace with your actual data)
data = {
    "words": {
        "apple": {"category": "Fruit", "color": "Red"},
        "banana": {"category": "Fruit", "color": "Yellow"},
        "orange": {"category": "Fruit", "color": "Orange"},
        "grape": {"category": "Fruit", "color": "Purple"}
    },
    "transformations": [
        {"from": "apple", "to": "ApplePie", "type": "Baking"},
        {"from": "banana", "to": "BananaBread", "type": "Baking"},
        {"from": "orange", "to": "OrangeJuice", "type": "Juicing"},
        {"from": "grape", "to": "grapefruit", "type": "Mutation"}
    ]
}

# Step 2: Create the directed graph
graph = nx.DiGraph()
# Add known word nodes
for word, metadata in data["words"].items():
    graph.add_node(word, **metadata)
# Add missing destination words as 'Generated' nodes
for transformation in data["transformations"]:
    to_word = transformation["to"]
    if to_word not in graph:
        graph.add_node(
            to_word,
            category="Generated",
            numeric=[ord(c) for c in to_word]
        )
# Add transformation edges
for transformation in data["transformations"]:
    graph.add_edge(
        transformation["from"],
        transformation["to"],
        transformation=transformation["type"]
    )

# Step 3: Analyze and visualize the graph (example: Venn diagram)
known_words = set(data["words"].keys())
generated_words = set(node for node, attr in graph.nodes(data=True) if attr.get("category") == "Generated")

venn2([known_words, generated_words], ('Known Words', 'Generated Words'))
plt.title("Known vs. Generated Words")
plt.show()

